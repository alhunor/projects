#include "actors.h"
#include "events.h"
//#include "tokenizer.h"
#include "utils.h"
#include <string>

actor::actor(wowEvent* eve)
{
	name = eve->sourceName;
}

player::~player()
{
	petListT::const_iterator it;
	for (it = pets.begin(); it != pets.end(); ++it)
	{
		delete *it;
	}

}

atype actorType(wowEvent* eve)
{
	atype at=Invalid;

	if (isPrefix("Player", eve->sourceGUID.c_str()))
	{
		return Player;
	}

	if (isPrefix("Pet", eve->sourceGUID.c_str()))
	{
		return Pet;
	}

	if (isPrefix("Creature", eve->sourceGUID.c_str()))
	{
		return Creature;
	}

	return Invalid;
} // atype actortype(wowEvent* eve)


actors::~actors()
{
	actorMapT::const_iterator it;
	for (it = actorMap.begin(); it != actorMap.end(); ++it)
	{
		delete it->second;
	}
}

actor::~actor()
{
	wowEventListT::const_iterator it2;
	for (it2 = actions.begin(); it2 != actions.end(); ++it2)
	{
		delete *it2;
	}
}

bool isFriendlyAndFreePlayer(wowEvent* eve)
{
	return (eve->sourceFlags & COMBATLOG_OBJECT_TYPE_PLAYER & COMBATLOG_OBJECT_REACTION_FRIENDLY) != 0;
}

void actors::add(wowEvent* eve)
{
	actor* actor;
	player* owner; // for pets
	actorMapT::const_iterator search;
	petListT::const_iterator searchPet;
	petT* pet;

	switch(actorType(eve))
	{
	case Player:
		if (! isFriendlyAndFreePlayer(eve))
		{
			return;
		}
		search = actorMap.find(eve->sourceGUID);
		if (search == actorMap.end())
		{
			{
				if (isPrefix("Kettle-Arathor", eve->sourceName.c_str()))
				{
					actor = new arcaneMage(eve);
				}
				else
				{
					actor = new player(eve);
				}
				actorMap[eve->sourceName] = actor;
			}
		}
		else
		{
			actor = search->second;
		}
		// process the event
		actor->actions.push_back(eve);
		break;
	case Pet:
		search = actorMap.find(eve->sourceGUID);
		owner = static_cast<player*>(search->second);
		for (searchPet = owner->pets.begin(); searchPet!=owner->pets.end(); ++searchPet)
		{
			pet = *searchPet;
			if (pet->name==eve->sourceName)
			{
				// found and event generated by the pet
				pet->actions.push_back(eve);
			}
		}
		break;
	case Creature:
		break;
	} // switch(actorType(eve))
} // actorType actors::add(wowEvent* eve)


bool arcaneMage::processEvent(wowEvent* eve)
{
	switch (eve->etype)
	{
	case SPELL_DAMAGE:
		break;
	default:
		return false;
	}
	return true;
}